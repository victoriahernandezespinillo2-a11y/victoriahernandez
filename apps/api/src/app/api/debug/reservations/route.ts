import { NextRequest, NextResponse } from 'next/server';
import { db } from '@repo/db';

/**
 * POST /api/debug/reservations
 * Endpoint de prueba para identificar problemas en la creaci√≥n de reservas
 * VERSI√ìN SIMPLIFICADA PARA DIAGN√ìSTICO
 */
export async function POST(request: NextRequest) {
  const diagnostics = {
    timestamp: new Date().toISOString(),
    step: 'initial',
    success: false,
    errors: [] as any[],
    data: null as any
  };

  try {
    // üîç PASO 1: VERIFICAR DATOS DE ENTRADA
    diagnostics.step = 'input_validation';
    console.log('üîç [DEBUG-RESERVATIONS] Paso 1: Validando datos de entrada...');
    
    const body = await request.json();
    console.log('üìù [DEBUG-RESERVATIONS] Datos recibidos:', body);

    // Validaci√≥n b√°sica
    if (!body.courtId || !body.startTime || !body.duration) {
      diagnostics.errors.push({
        step: 'input_validation',
        error: 'Datos incompletos',
        received: body
      });
      return NextResponse.json({
        success: false,
        error: 'Datos incompletos',
        diagnostics
      }, { status: 400 });
    }

    // üîç PASO 2: VERIFICAR CONEXI√ìN A BASE DE DATOS
    diagnostics.step = 'database_check';
    console.log('üîç [DEBUG-RESERVATIONS] Paso 2: Verificando conexi√≥n a base de datos...');
    
    try {
      await db.$queryRaw`SELECT 1`;
      console.log('‚úÖ [DEBUG-RESERVATIONS] Base de datos conectada');
      diagnostics.data = { database: 'connected' };
    } catch (dbError: any) {
      console.error('‚ùå [DEBUG-RESERVATIONS] Error de base de datos:', dbError);
      diagnostics.errors.push({
        step: 'database_check',
        error: 'Error de conexi√≥n a base de datos',
        details: dbError.message
      });
      return NextResponse.json({
        success: false,
        error: 'Error de base de datos',
        diagnostics
      }, { status: 500 });
    }

    // üîç PASO 3: VERIFICAR EXISTENCIA DE CANCHA
    diagnostics.step = 'court_validation';
    console.log('üîç [DEBUG-RESERVATIONS] Paso 3: Verificando existencia de cancha...');
    
    try {
      const court = await db.court.findUnique({
        where: { id: body.courtId },
        select: { id: true, name: true, isActive: true }
      });

      if (!court) {
        diagnostics.errors.push({
          step: 'court_validation',
          error: 'Cancha no encontrada',
          courtId: body.courtId
        });
        return NextResponse.json({
          success: false,
          error: 'Cancha no encontrada',
          diagnostics
        }, { status: 404 });
      }

      console.log('‚úÖ [DEBUG-RESERVATIONS] Cancha encontrada:', court.name);
      diagnostics.data = { ...diagnostics.data, court: { id: court.id, name: court.name } };
    } catch (courtError: any) {
      console.error('‚ùå [DEBUG-RESERVATIONS] Error verificando cancha:', courtError);
      diagnostics.errors.push({
        step: 'court_validation',
        error: 'Error verificando cancha',
        details: courtError.message
      });
      return NextResponse.json({
        success: false,
        error: 'Error verificando cancha',
        diagnostics
      }, { status: 500 });
    }

    // üîç PASO 4: SIMULAR VALIDACI√ìN DE DISPONIBILIDAD
    diagnostics.step = 'availability_simulation';
    console.log('üîç [DEBUG-RESERVATIONS] Paso 4: Simulando validaci√≥n de disponibilidad...');
    
    const startTime = new Date(body.startTime);
    const endTime = new Date(startTime.getTime() + body.duration * 60000);
    
    console.log('üïê [DEBUG-RESERVATIONS] Horario solicitado:', {
      startTime: startTime.toISOString(),
      endTime: endTime.toISOString(),
      duration: body.duration
    });

    diagnostics.data = { 
      ...diagnostics.data, 
      availability: {
        startTime: startTime.toISOString(),
        endTime: endTime.toISOString(),
        duration: body.duration
      }
    };
    diagnostics.success = true;

    return NextResponse.json({
      success: true,
      message: 'Diagn√≥stico completado exitosamente',
      diagnostics,
      recommendations: [
        '‚úÖ Conexi√≥n a base de datos funcionando',
        '‚úÖ Cancha encontrada y v√°lida',
        '‚úÖ Datos de entrada v√°lidos',
        '‚úÖ Simulaci√≥n de disponibilidad exitosa'
      ]
    });

  } catch (error: any) {
    console.error('üö® [DEBUG-RESERVATIONS] Error en diagn√≥stico:', error);
    
    diagnostics.errors.push({
      step: diagnostics.step,
      error: {
        message: error.message,
        name: error.name,
        code: error.code,
        meta: error.meta
      }
    });

    return NextResponse.json({
      success: false,
      error: 'Error durante el diagn√≥stico',
      diagnostics,
      recommendations: [
        'üö® Se detect√≥ un error en el paso: ' + diagnostics.step,
        'üîç Revisar logs del servidor para m√°s detalles',
        'üîå Verificar conexi√≥n a base de datos',
        'üîê Verificar configuraci√≥n de autenticaci√≥n'
      ]
    }, { status: 500 });
  }
}
