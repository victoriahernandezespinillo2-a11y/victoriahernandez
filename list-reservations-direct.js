// üìã SCRIPT SIMPLE PARA LISTAR RESERVAS USANDO CONEXI√ìN DIRECTA
require('dotenv').config();
const { Client } = require('pg');

// Usar la DATABASE_URL directa
const client = new Client({
  connectionString: process.env.DATABASE_URL
});

async function listAllReservations() {
  try {
    console.log('üîç Conectando a PostgreSQL...');
    await client.connect();
    console.log('‚úÖ Conexi√≥n establecida');
    console.log('üîç Obteniendo todas las reservas del sistema...');
    console.log('=' .repeat(80));

    // Query simple para obtener todas las reservas
    const query = `
      SELECT 
        r.id,
        r.user_id,
        r.court_id,
        r.start_time,
        r.end_time,
        r.status,
        r.total_amount,
        r.notes,
        r.created_at,
        u.name as user_name,
        u.email as user_email,
        u.phone as user_phone,
        c.name as court_name
      FROM reservations r
      LEFT JOIN users u ON r.user_id = u.id
      LEFT JOIN courts c ON r.court_id = c.id
      ORDER BY r.start_time DESC, r.created_at DESC
      LIMIT 50;
    `;

    const result = await client.query(query);
    const reservations = result.rows;

    console.log(`üìä TOTAL DE RESERVAS ENCONTRADAS: ${reservations.length}`);
    console.log('=' .repeat(80));

    if (reservations.length === 0) {
      console.log('‚ùå No se encontraron reservas en el sistema.');
      return;
    }

    // Agrupar reservas por usuario
    const userStats = {};

    reservations.forEach(reservation => {
      const userId = reservation.user_id;
      const userName = reservation.user_name || 'Usuario sin nombre';
      const userEmail = reservation.user_email || 'Sin email';

      if (!userStats[userId]) {
        userStats[userId] = {
          name: userName,
          email: userEmail,
          phone: reservation.user_phone || 'Sin tel√©fono',
          totalReservations: 0,
          statusCount: {}
        };
      }

      userStats[userId].totalReservations++;
      userStats[userId].statusCount[reservation.status] = (userStats[userId].statusCount[reservation.status] || 0) + 1;
    });

    // Mostrar estad√≠sticas por usuario
    console.log('üë• ESTAD√çSTICAS POR USUARIO:');
    console.log('-'.repeat(80));

    Object.entries(userStats).forEach(([userId, stats]) => {
      console.log(`\nüßë‚Äçüíº USUARIO: ${stats.name}`);
      console.log(`   üìß Email: ${stats.email}`);
      console.log(`   üì± Tel√©fono: ${stats.phone}`);
      console.log(`   üÜî ID: ${userId}`);
      console.log(`   üìä Total Reservas: ${stats.totalReservations}`);
      console.log(`   üìà Estados:`);
      Object.entries(stats.statusCount).forEach(([status, count]) => {
        if (count > 0) {
          const statusEmoji = {
            PENDING: '‚è≥',
            PAID: '‚úÖ',
            IN_PROGRESS: 'üèÉ‚Äç‚ôÇÔ∏è',
            COMPLETED: 'üèÅ',
            CANCELLED: '‚ùå'
          };
          console.log(`      ${statusEmoji[status] || '‚ùì'} ${status}: ${count}`);
        }
      });
    });

    console.log('\n' + '='.repeat(80));
    console.log('üìã DETALLE DE TODAS LAS RESERVAS:');
    console.log('='.repeat(80));

    // Mostrar todas las reservas con detalles
    reservations.forEach((reservation, index) => {
      const startTime = new Date(reservation.start_time).toLocaleString('es-ES', {
        timeZone: 'America/Bogota',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });

      const endTime = new Date(reservation.end_time).toLocaleString('es-ES', {
        timeZone: 'America/Bogota',
        hour: '2-digit',
        minute: '2-digit'
      });

      const statusEmoji = {
        PENDING: '‚è≥',
        PAID: '‚úÖ',
        IN_PROGRESS: 'üèÉ‚Äç‚ôÇÔ∏è',
        COMPLETED: 'üèÅ',
        CANCELLED: '‚ùå'
      };

      console.log(`\n${index + 1}. üìÖ RESERVA ID: ${reservation.id}`);
      console.log(`   üë§ Usuario: ${reservation.user_name || 'Sin nombre'} (${reservation.user_email || 'Sin email'})`);
      console.log(`   üÜî User ID: ${reservation.user_id}`);
      console.log(`   üèüÔ∏è  Cancha: ${reservation.court_name || 'Sin nombre'}`);
      console.log(`   üïê Horario: ${startTime} - ${endTime}`);
      console.log(`   ${statusEmoji[reservation.status] || '‚ùì'} Estado: ${reservation.status}`);
      console.log(`   üí∞ Precio: $${reservation.total_amount || 0}`);
      console.log(`   üìù Creada: ${new Date(reservation.created_at).toLocaleString('es-ES')}`);
      
      if (reservation.notes) {
        console.log(`   üìã Notas: ${reservation.notes}`);
      }
    });

    // Mostrar resumen final
    console.log('\n' + '='.repeat(80));
    console.log('üìä RESUMEN FINAL:');
    console.log('='.repeat(80));
    console.log(`üë• Total de usuarios con reservas: ${Object.keys(userStats).length}`);
    console.log(`üìÖ Total de reservas: ${reservations.length}`);
    
    // Contar por estado
    const statusTotals = reservations.reduce((acc, res) => {
      acc[res.status] = (acc[res.status] || 0) + 1;
      return acc;
    }, {});

    console.log('\nüìà Reservas por estado:');
    Object.entries(statusTotals).forEach(([status, count]) => {
      const statusEmoji = {
        PENDING: '‚è≥',
        PAID: '‚úÖ',
        IN_PROGRESS: 'üèÉ‚Äç‚ôÇÔ∏è',
        COMPLETED: 'üèÅ',
        CANCELLED: '‚ùå'
      };
      console.log(`   ${statusEmoji[status] || '‚ùì'} ${status}: ${count}`);
    });

    // Verificar si hay un usuario dominante
    const sortedUsers = Object.entries(userStats).sort((a, b) => b[1].totalReservations - a[1].totalReservations);
    if (sortedUsers.length > 0) {
      const topUser = sortedUsers[0];
      const percentage = ((topUser[1].totalReservations / reservations.length) * 100).toFixed(1);
      
      console.log('\nüèÜ USUARIO CON M√ÅS RESERVAS:');
      console.log('-'.repeat(50));
      console.log(`üë§ ${topUser[1].name} (${topUser[1].email})`);
      console.log(`üìä ${topUser[1].totalReservations} reservas (${percentage}% del total)`);
      console.log(`üÜî User ID: ${topUser[0]}`);
      
      if (percentage > 80) {
        console.log('\n‚ö†Ô∏è  ALERTA: Este usuario tiene m√°s del 80% de todas las reservas!');
        console.log('   Esto podr√≠a explicar por qu√© todas las reservas aparecen como "ocupado por otros"');
        console.log('   si el sistema no est√° identificando correctamente al usuario actual.');
      }
    }

  } catch (error) {
    console.error('‚ùå Error obteniendo reservas:', error.message);
    console.error('C√≥digo de error:', error.code);
    
    // Intentar mostrar las tablas disponibles
    try {
      console.log('\nüîç Intentando listar las tablas disponibles...');
      const tablesQuery = `
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_type = 'BASE TABLE'
        ORDER BY table_name;
      `;
      const tablesResult = await client.query(tablesQuery);
      console.log('üìã Tablas encontradas:');
      tablesResult.rows.forEach(row => {
        console.log(`   - ${row.table_name}`);
      });
    } catch (tablesError) {
      console.error('‚ùå Error listando tablas:', tablesError.message);
    }
  } finally {
    await client.end();
  }
}

// Ejecutar el script
if (require.main === module) {
  listAllReservations()
    .then(() => {
      console.log('\n‚úÖ Script completado.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Error ejecutando script:', error.message);
      process.exit(1);
    });
}

module.exports = { listAllReservations };