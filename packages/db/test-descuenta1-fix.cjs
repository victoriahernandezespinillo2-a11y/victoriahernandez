#!/usr/bin/env node

/**
 * üß™ SCRIPT DE PRUEBA: Verificar correcci√≥n para c√≥digo DESCUENTA1
 * 
 * Simula el escenario exacto del usuario:
 * - Reserva de 2‚Ç¨
 * - C√≥digo DESCUENTA1 (1‚Ç¨ de descuento)
 * - Monto final: 1‚Ç¨
 * - Redsys debe cobrar: 1‚Ç¨ (no 2‚Ç¨)
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDescuenta1Fix() {
  console.log('üß™ [TEST-DESCUENTA1] Iniciando prueba espec√≠fica...\n');

  try {
    // 1. Buscar la promoci√≥n DESCUENTA1
    console.log('1Ô∏è‚É£ [TEST-DESCUENTA1] Buscando promoci√≥n DESCUENTA1...');
    const promo = await prisma.promotion.findFirst({
      where: {
        code: 'DESCUENTA1',
        status: 'ACTIVE'
      }
    });

    if (!promo) {
      console.log('‚ùå [TEST-DESCUENTA1] Promoci√≥n DESCUENTA1 no encontrada');
      return;
    }

    console.log('‚úÖ [TEST-DESCUENTA1] Promoci√≥n encontrada:', {
      id: promo.id,
      name: promo.name,
      code: promo.code,
      rewards: promo.rewards
    });

    // 2. Simular el escenario del usuario
    console.log('\n2Ô∏è‚É£ [TEST-DESCUENTA1] Simulando escenario del usuario...');
    
    const originalAmount = 2.00; // Reserva de 2‚Ç¨ como en las im√°genes
    const rewards = promo.rewards;
    
    // Calcular descuento
    let discountAmount = 0;
    let finalAmount = originalAmount;

    if (rewards.type === 'DISCOUNT_FIXED') {
      discountAmount = rewards.value; // 1‚Ç¨
      finalAmount = Math.max(0, originalAmount - discountAmount); // 1‚Ç¨
    }

    console.log('üí∞ [TEST-DESCUENTA1] C√°lculo del descuento:');
    console.log('   Reserva original: ‚Ç¨' + originalAmount);
    console.log('   C√≥digo aplicado: ' + promo.code);
    console.log('   Descuento: ‚Ç¨' + discountAmount);
    console.log('   Monto final: ‚Ç¨' + finalAmount);

    // 3. Simular URLs de redirecci√≥n
    console.log('\n3Ô∏è‚É£ [TEST-DESCUENTA1] Simulando URLs de redirecci√≥n...');
    
    const reservationId = 'test-reservation-id';
    
    // URL ANTES de la correcci√≥n (incorrecta)
    const oldUrl = `/api/payments/redsys/redirect?rid=${reservationId}`;
    
    // URL DESPU√âS de la correcci√≥n (correcta)
    const newUrl = `/api/payments/redsys/redirect?rid=${reservationId}&promo=${promo.code}&finalAmount=${finalAmount}`;
    
    console.log('üîó [TEST-DESCUENTA1] URLs de redirecci√≥n:');
    console.log('   ‚ùå ANTES (incorrecto):', oldUrl);
    console.log('   ‚úÖ DESPU√âS (correcto):', newUrl);

    // 4. Simular par√°metros que recibir√≠a Redsys
    console.log('\n4Ô∏è‚É£ [TEST-DESCUENTA1] Par√°metros que recibir√≠a Redsys...');
    
    const searchParams = new URL(`http://localhost:3002${newUrl}`).searchParams;
    const finalAmountParam = searchParams.get('finalAmount');
    const promoCodeParam = searchParams.get('promo');
    
    console.log('üìã [TEST-DESCUENTA1] Par√°metros extra√≠dos:');
    console.log('   finalAmountParam:', finalAmountParam);
    console.log('   promoCodeParam:', promoCodeParam);

    // 5. Simular l√≥gica del endpoint corregido
    console.log('\n5Ô∏è‚É£ [TEST-DESCUENTA1] Simulando l√≥gica del endpoint...');
    
    let amountToUse, amountSource;
    
    if (finalAmountParam && !isNaN(Number(finalAmountParam))) {
      amountToUse = Number(finalAmountParam);
      amountSource = 'finalAmount (con descuento)';
    } else {
      amountToUse = originalAmount;
      amountSource = 'totalPrice (sin descuento)';
    }
    
    const amountInCents = Math.round(amountToUse * 100).toString();
    
    console.log('üí∞ [TEST-DESCUENTA1] C√°lculo final para Redsys:');
    console.log('   amountSource:', amountSource);
    console.log('   amountToUse:', amountToUse);
    console.log('   amountInCents:', amountInCents);

    // 6. Verificar la correcci√≥n
    console.log('\n6Ô∏è‚É£ [TEST-DESCUENTA1] Verificando correcci√≥n...');
    
    const expectedAmount = finalAmount; // Deber√≠a ser 1‚Ç¨
    const actualAmount = amountToUse;
    
    console.log('üìä [TEST-DESCUENTA1] Comparaci√≥n:');
    console.log('   Monto esperado (con descuento): ‚Ç¨' + expectedAmount);
    console.log('   Monto que usar√≠a Redsys: ‚Ç¨' + actualAmount);
    console.log('   Monto original (sin correcci√≥n): ‚Ç¨' + originalAmount);
    
    if (Math.abs(actualAmount - expectedAmount) < 0.01) {
      console.log('\n‚úÖ [TEST-DESCUENTA1] ¬°CORRECCI√ìN EXITOSA!');
      console.log('   ‚úÖ Redsys cobrar√° el monto correcto: ‚Ç¨' + actualAmount);
      console.log('   ‚úÖ El usuario pagar√° solo ‚Ç¨' + actualAmount + ' en lugar de ‚Ç¨' + originalAmount);
    } else {
      console.log('\n‚ùå [TEST-DESCUENTA1] ¬°ERROR EN LA CORRECCI√ìN!');
      console.log('   ‚ùå Redsys cobrar√≠a ‚Ç¨' + actualAmount + ' en lugar de ‚Ç¨' + expectedAmount);
    }

    // 7. Resumen final
    console.log('\nüìä [TEST-DESCUENTA1] RESUMEN DEL ESCENARIO:');
    console.log('   üîπ C√≥digo usado: ' + promo.code);
    console.log('   üîπ Reserva original: ‚Ç¨' + originalAmount);
    console.log('   üîπ Descuento aplicado: ‚Ç¨' + discountAmount);
    console.log('   üîπ Monto final: ‚Ç¨' + finalAmount);
    console.log('   üîπ Redsys cobrar√°: ‚Ç¨' + actualAmount);
    console.log('   üîπ Correcci√≥n funciona: ' + (actualAmount === finalAmount ? 'S√ç ‚úÖ' : 'NO ‚ùå'));

  } catch (error) {
    console.error('‚ùå [TEST-DESCUENTA1] Error en la prueba:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testDescuenta1Fix().catch(console.error);
