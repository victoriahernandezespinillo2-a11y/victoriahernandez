/**
 * Script para verificar el estado de una reserva espec√≠fica
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkReservationStatus() {
  try {
    console.log('üîç Verificando estado de reservas...\n');
    
    // Buscar reservas del usuario cieloyverdad@gmail.com
    const user = await prisma.user.findUnique({
      where: { email: 'cieloyverdad@gmail.com' }
    });
    
    if (!user) {
      console.log('‚ùå Usuario no encontrado');
      return;
    }
    
    console.log(`üë§ Usuario: ${user.name} (${user.email})`);
    
    // Obtener todas las reservas del usuario
    const reservations = await prisma.reservation.findMany({
      where: { userId: user.id },
      include: {
        court: {
          include: {
            center: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    });
    
    console.log(`\nüìÖ Total de reservas: ${reservations.length}\n`);
    
    reservations.forEach((reservation, index) => {
      console.log(`üèüÔ∏è RESERVA #${index + 1}:`);
      console.log(`   - ID: ${reservation.id}`);
      console.log(`   - Cancha: ${reservation.court.name}`);
      console.log(`   - Centro: ${reservation.court.center.name}`);
      console.log(`   - Estado: ${reservation.status}`);
      console.log(`   - Fecha: ${reservation.startTime.toISOString()}`);
      console.log(`   - Horario: ${reservation.startTime.toLocaleTimeString()} - ${reservation.endTime.toLocaleTimeString()}`);
      console.log(`   - Precio: ${reservation.totalPrice}‚Ç¨`);
      console.log(`   - M√©todo de pago: ${reservation.paymentMethod || 'No especificado'}`);
      console.log(`   - Check-in: ${reservation.checkInTime ? reservation.checkInTime.toISOString() : 'No realizado'}`);
      
      // Verificar si puede generar pase
      const validPassStatuses = ['PAID', 'IN_PROGRESS'];
      const canGeneratePass = validPassStatuses.includes(reservation.status);
      const isExpired = reservation.endTime < new Date();
      
      console.log(`   - ¬øPuede generar pase?: ${canGeneratePass ? '‚úÖ S√ç' : '‚ùå NO'}`);
      console.log(`   - ¬øEst√° expirada?: ${isExpired ? '‚è∞ S√ç' : '‚è∞ NO'}`);
      
      if (!canGeneratePass) {
        if (reservation.status === 'COMPLETED') {
          console.log('   - Raz√≥n: Reserva completada');
        } else if (reservation.status === 'NO_SHOW') {
          console.log('   - Raz√≥n: No se present√≥');
        } else if (reservation.status === 'CANCELLED') {
          console.log('   - Raz√≥n: Reserva cancelada');
        } else if (reservation.status === 'PENDING') {
          console.log('   - Raz√≥n: Pago pendiente');
        }
      }
      
      if (isExpired && canGeneratePass) {
        console.log('   - ‚ö†Ô∏è Reserva expirada pero en estado v√°lido');
      }
      
      console.log('');
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

checkReservationStatus()
  .then(() => {
    console.log('‚úÖ Verificaci√≥n completada');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error:', error);
    process.exit(1);
  });
